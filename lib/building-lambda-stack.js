"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildingLamdaStacks = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const appsync = require("aws-cdk-lib/aws-appsync");
const helpers_1 = require("./helpers");
const path_1 = require("path");
class BuildingLamdaStacks extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const { acmsDatabase, acmsGraphqlApi } = props;
        const buildingFunction = new appsync.AppsyncFunction(this, "createBuilding", {
            name: "createBuilding",
            api: acmsGraphqlApi,
            dataSource: acmsGraphqlApi.addDynamoDbDataSource("acmsDatabase", acmsDatabase),
            code: (0, helpers_1.bundleAppSyncResolver)("src/resolvers/building/createBuilding.ts"),
            runtime: appsync.FunctionRuntime.JS_1_0_0,
        });
        new appsync.Resolver(this, "createBuildingResolver", {
            api: acmsGraphqlApi,
            typeName: "Mutation",
            fieldName: "createBuilding",
            code: appsync.Code.fromAsset((0, path_1.join)(__dirname, "./js_resolvers/_before_and_after_mapping_template.js")),
            runtime: appsync.FunctionRuntime.JS_1_0_0,
            pipelineConfig: [buildingFunction],
        });
    }
}
exports.BuildingLamdaStacks = BuildingLamdaStacks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRpbmctbGFtYmRhLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVpbGRpbmctbGFtYmRhLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFnRDtBQWVoRCxtREFBbUQ7QUFDbkQsdUNBQWtEO0FBQ2xELCtCQUE0QjtBQU81QixNQUFhLG1CQUFvQixTQUFRLG1CQUFLO0lBQzVDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBK0I7UUFDdkUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFFL0MsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQ2xELElBQUksRUFDSixnQkFBZ0IsRUFDaEI7WUFDRSxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLEdBQUcsRUFBRSxjQUFjO1lBQ25CLFVBQVUsRUFBRSxjQUFjLENBQUMscUJBQXFCLENBQzlDLGNBQWMsRUFDZCxZQUFZLENBQ2I7WUFDRCxJQUFJLEVBQUUsSUFBQSwrQkFBcUIsRUFBQywwQ0FBMEMsQ0FBQztZQUN2RSxPQUFPLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxRQUFRO1NBQzFDLENBQ0YsQ0FBQztRQUVGLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsd0JBQXdCLEVBQUU7WUFDbkQsR0FBRyxFQUFFLGNBQWM7WUFDbkIsUUFBUSxFQUFFLFVBQVU7WUFDcEIsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQzFCLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxzREFBc0QsQ0FBQyxDQUN4RTtZQUNELE9BQU8sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLFFBQVE7WUFDekMsY0FBYyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7U0FDbkMsQ0FBQyxDQUFDO0lBRUwsQ0FBQztDQUNGO0FBakNELGtEQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrLCBTdGFja1Byb3BzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQge1xuICBDZm5EYXRhU291cmNlLFxuICBDZm5HcmFwaFFMQXBpLFxuICBDZm5HcmFwaFFMU2NoZW1hLFxuICBDZm5SZXNvbHZlcixcbn0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1hcHBzeW5jXCI7XG5pbXBvcnQgKiBhcyBzaWduZXIgZnJvbSBcImF3cy1jZGstbGliL2F3cy1zaWduZXJcIjtcbmltcG9ydCB7IFRhYmxlIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1keW5hbW9kYlwiO1xuaW1wb3J0IHsgTWFuYWdlZFBvbGljeSwgUm9sZSwgU2VydmljZVByaW5jaXBhbCB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSBcImF3cy1jZGstbGliL2F3cy1sYW1iZGFcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBOb2RlanNGdW5jdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLW5vZGVqc1wiO1xuaW1wb3J0IHsgVHJhY2luZyB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyBhcHBzeW5jIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBwc3luY1wiO1xuaW1wb3J0IHsgYnVuZGxlQXBwU3luY1Jlc29sdmVyIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gXCJwYXRoXCI7XG5cbmludGVyZmFjZSBCdWlsZGluZ0xhbWJkYVN0YWNrUHJvcHMgZXh0ZW5kcyBTdGFja1Byb3BzIHtcbiAgYWNtc0dyYXBocWxBcGk6IGFwcHN5bmMuR3JhcGhxbEFwaTtcbiAgYWNtc0RhdGFiYXNlOiBUYWJsZTtcbn1cblxuZXhwb3J0IGNsYXNzIEJ1aWxkaW5nTGFtZGFTdGFja3MgZXh0ZW5kcyBTdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBCdWlsZGluZ0xhbWJkYVN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHsgYWNtc0RhdGFiYXNlLCBhY21zR3JhcGhxbEFwaSB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBidWlsZGluZ0Z1bmN0aW9uID0gbmV3IGFwcHN5bmMuQXBwc3luY0Z1bmN0aW9uKFxuICAgICAgdGhpcyxcbiAgICAgIFwiY3JlYXRlQnVpbGRpbmdcIixcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJjcmVhdGVCdWlsZGluZ1wiLFxuICAgICAgICBhcGk6IGFjbXNHcmFwaHFsQXBpLFxuICAgICAgICBkYXRhU291cmNlOiBhY21zR3JhcGhxbEFwaS5hZGREeW5hbW9EYkRhdGFTb3VyY2UoXG4gICAgICAgICAgXCJhY21zRGF0YWJhc2VcIixcbiAgICAgICAgICBhY21zRGF0YWJhc2VcbiAgICAgICAgKSxcbiAgICAgICAgY29kZTogYnVuZGxlQXBwU3luY1Jlc29sdmVyKFwic3JjL3Jlc29sdmVycy9idWlsZGluZy9jcmVhdGVCdWlsZGluZy50c1wiKSxcbiAgICAgICAgcnVudGltZTogYXBwc3luYy5GdW5jdGlvblJ1bnRpbWUuSlNfMV8wXzAsXG4gICAgICB9XG4gICAgKTtcblxuICAgIG5ldyBhcHBzeW5jLlJlc29sdmVyKHRoaXMsIFwiY3JlYXRlQnVpbGRpbmdSZXNvbHZlclwiLCB7XG4gICAgICBhcGk6IGFjbXNHcmFwaHFsQXBpLFxuICAgICAgdHlwZU5hbWU6IFwiTXV0YXRpb25cIixcbiAgICAgIGZpZWxkTmFtZTogXCJjcmVhdGVCdWlsZGluZ1wiLFxuICAgICAgY29kZTogYXBwc3luYy5Db2RlLmZyb21Bc3NldChcbiAgICAgICAgam9pbihfX2Rpcm5hbWUsIFwiLi9qc19yZXNvbHZlcnMvX2JlZm9yZV9hbmRfYWZ0ZXJfbWFwcGluZ190ZW1wbGF0ZS5qc1wiKVxuICAgICAgKSxcbiAgICAgIHJ1bnRpbWU6IGFwcHN5bmMuRnVuY3Rpb25SdW50aW1lLkpTXzFfMF8wLFxuICAgICAgcGlwZWxpbmVDb25maWc6IFtidWlsZGluZ0Z1bmN0aW9uXSxcbiAgICB9KTtcblxuICB9XG59XG4iXX0=