"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const utils_1 = require("../../utils");
const bookingEntity_1 = require("./entities/bookingEntity");
async function createApartmentBooking(appsyncInput, logger) {
    const documentClient = new aws_sdk_1.DynamoDB.DocumentClient();
    let tableName = process.env.ACMS_DB;
    const BOOKING_QUEUE_URL = process.env.BOOKING_QUEUE_URL;
    const createdOn = Date.now().toString();
    const id = (0, utils_1.uuid)();
    const sqs = new aws_sdk_1.SQS();
    if (BOOKING_QUEUE_URL === undefined) {
        logger.error(`Couldn't get the queue url name`);
        throw Error("Couldn't get queue url");
    }
    const bookingInput = new bookingEntity_1.BookingEntity({
        id: id,
        ...appsyncInput.input,
        createdOn,
    });
    if (tableName === undefined) {
        logger.error(`Couldn't get the table name`);
        tableName = "AcmsDynamoDBTable";
    }
    logger.info(`create booking input info", ${JSON.stringify(bookingInput)}`);
    const params = {
        TableName: tableName,
        IndexName: "getAllApartmentsPerUser",
        KeyConditionExpression: "#GSI1PK = :GSI1PK AND #GSI1SK = :GSI1SK",
        FilterExpression: "#bookingStatus = :bookingStatus",
        ExpressionAttributeNames: {
            "#GSI1PK": "GSI1PK",
            "#GSI1SK": "GSI1SK",
            "#bookingStatus": "bookingStatus",
        },
        ExpressionAttributeValues: {
            ":GSI1PK": `USER#${appsyncInput.input.userId}`,
            ":GSI1SK": `APARTMENT#${appsyncInput.input.apartmentId}`,
            ":bookingStatus": "PENDING",
        },
    };
    //We want to make sure this particular user doesn't already have a pending booking for this apartment.
    const response = await documentClient.query(params).promise();
    if (response.Count != null) {
        //No pending booking, send booking to SQS
        if (response.Count <= 0) {
            logger.info(`sqs pre message ${JSON.stringify(bookingInput.toItem())}`);
            logger.info(`sqs  queue url ${BOOKING_QUEUE_URL}`);
            const sqsParams = {
                MessageBody: JSON.stringify(bookingInput.toItem()),
                QueueUrl: BOOKING_QUEUE_URL,
            };
            try {
                await sqs.sendMessage(sqsParams).promise();
                return true;
            }
            catch (error) {
                logger.info(`an error occured while sending message to sqs", ${error}`);
                throw Error(`an error occured while sending message to sqs", ${error}`);
            }
        }
        //Pending Booking,don't send any message to SQS
        else {
            throw new Error("You Already have a pending booking for this apartment");
        }
    }
    else {
        throw new Error("Error Querying pending bookings");
    }
}
exports.default = createApartmentBooking;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlQXBhcnRtZW50Qm9va2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZUFwYXJ0bWVudEJvb2tpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxxQ0FBeUM7QUFDekMsdUNBQW1DO0FBRW5DLDREQUF5RDtBQUV6RCxLQUFLLFVBQVUsc0JBQXNCLENBQ25DLFlBQWdDLEVBQ2hDLE1BQWM7SUFFZCxNQUFNLGNBQWMsR0FBRyxJQUFJLGtCQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDckQsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7SUFDcEMsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO0lBQ3hELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QyxNQUFNLEVBQUUsR0FBVyxJQUFBLFlBQUksR0FBRSxDQUFDO0lBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxFQUFFLENBQUM7SUFFdEIsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7UUFDbkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7S0FDdkM7SUFFRCxNQUFNLFlBQVksR0FBa0IsSUFBSSw2QkFBYSxDQUFDO1FBQ3BELEVBQUUsRUFBRSxFQUFFO1FBQ04sR0FBRyxZQUFZLENBQUMsS0FBSztRQUNyQixTQUFTO0tBQ1YsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1FBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUM1QyxTQUFTLEdBQUcsbUJBQW1CLENBQUM7S0FDakM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLCtCQUErQixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxNQUFNLE1BQU0sR0FBRztRQUNiLFNBQVMsRUFBRSxTQUFTO1FBQ3BCLFNBQVMsRUFBRSx5QkFBeUI7UUFDcEMsc0JBQXNCLEVBQUUseUNBQXlDO1FBQ2pFLGdCQUFnQixFQUFFLGlDQUFpQztRQUNuRCx3QkFBd0IsRUFBRTtZQUN4QixTQUFTLEVBQUUsUUFBUTtZQUNuQixTQUFTLEVBQUUsUUFBUTtZQUNuQixnQkFBZ0IsRUFBRSxlQUFlO1NBQ2xDO1FBQ0QseUJBQXlCLEVBQUU7WUFDekIsU0FBUyxFQUFFLFFBQVEsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDOUMsU0FBUyxFQUFFLGFBQWEsWUFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUU7WUFDeEQsZ0JBQWdCLEVBQUUsU0FBUztTQUM1QjtLQUNGLENBQUM7SUFFRixzR0FBc0c7SUFDdEcsTUFBTSxRQUFRLEdBQUcsTUFBTSxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlELElBQUksUUFBUSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDMUIseUNBQXlDO1FBRXpDLElBQUksUUFBUSxDQUFDLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEUsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sU0FBUyxHQUFpQztnQkFDOUMsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNsRCxRQUFRLEVBQUUsaUJBQWlCO2FBQzVCLENBQUM7WUFFRixJQUFJO2dCQUNGLE1BQU0sR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDM0MsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsbURBQW1ELEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ3hFLE1BQU0sS0FBSyxDQUFDLG1EQUFtRCxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQ3pFO1NBQ0Y7UUFDRCwrQ0FBK0M7YUFDMUM7WUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7U0FDMUU7S0FDRjtTQUFNO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0tBQ3BEO0FBQ0gsQ0FBQztBQUVELGtCQUFlLHNCQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBhd3MtbGFtYmRhLXBvd2VydG9vbHMvbG9nZ2VyXCI7XG5pbXBvcnQgeyAgRHluYW1vREIsIFNRUyB9IGZyb20gXCJhd3Mtc2RrXCI7XG5pbXBvcnQgeyB1dWlkIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgQ3JlYXRlQm9va2luZ0lucHV0IGZyb20gXCIuL0NyZWF0ZUJvb2tpbmdJbnB1dFwiO1xuaW1wb3J0IHsgQm9va2luZ0VudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzL2Jvb2tpbmdFbnRpdHlcIjtcblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQXBhcnRtZW50Qm9va2luZyhcbiAgYXBwc3luY0lucHV0OiBDcmVhdGVCb29raW5nSW5wdXQsXG4gIGxvZ2dlcjogTG9nZ2VyXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3QgZG9jdW1lbnRDbGllbnQgPSBuZXcgRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcbiAgbGV0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LkFDTVNfREI7XG4gIGNvbnN0IEJPT0tJTkdfUVVFVUVfVVJMID0gcHJvY2Vzcy5lbnYuQk9PS0lOR19RVUVVRV9VUkw7XG4gIGNvbnN0IGNyZWF0ZWRPbiA9IERhdGUubm93KCkudG9TdHJpbmcoKTtcbiAgY29uc3QgaWQ6IHN0cmluZyA9IHV1aWQoKTtcbiAgY29uc3Qgc3FzID0gbmV3IFNRUygpO1xuXG4gIGlmIChCT09LSU5HX1FVRVVFX1VSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBDb3VsZG4ndCBnZXQgdGhlIHF1ZXVlIHVybCBuYW1lYCk7XG4gICAgdGhyb3cgRXJyb3IoXCJDb3VsZG4ndCBnZXQgcXVldWUgdXJsXCIpO1xuICB9XG5cbiAgY29uc3QgYm9va2luZ0lucHV0OiBCb29raW5nRW50aXR5ID0gbmV3IEJvb2tpbmdFbnRpdHkoe1xuICAgIGlkOiBpZCxcbiAgICAuLi5hcHBzeW5jSW5wdXQuaW5wdXQsXG4gICAgY3JlYXRlZE9uLFxuICB9KTtcbiAgaWYgKHRhYmxlTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBDb3VsZG4ndCBnZXQgdGhlIHRhYmxlIG5hbWVgKTtcbiAgICB0YWJsZU5hbWUgPSBcIkFjbXNEeW5hbW9EQlRhYmxlXCI7XG4gIH1cblxuICBsb2dnZXIuaW5mbyhgY3JlYXRlIGJvb2tpbmcgaW5wdXQgaW5mb1wiLCAke0pTT04uc3RyaW5naWZ5KGJvb2tpbmdJbnB1dCl9YCk7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICBJbmRleE5hbWU6IFwiZ2V0QWxsQXBhcnRtZW50c1BlclVzZXJcIixcbiAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiBcIiNHU0kxUEsgPSA6R1NJMVBLIEFORCAjR1NJMVNLID0gOkdTSTFTS1wiLFxuICAgIEZpbHRlckV4cHJlc3Npb246IFwiI2Jvb2tpbmdTdGF0dXMgPSA6Ym9va2luZ1N0YXR1c1wiLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge1xuICAgICAgXCIjR1NJMVBLXCI6IFwiR1NJMVBLXCIsXG4gICAgICBcIiNHU0kxU0tcIjogXCJHU0kxU0tcIixcbiAgICAgIFwiI2Jvb2tpbmdTdGF0dXNcIjogXCJib29raW5nU3RhdHVzXCIsXG4gICAgfSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICBcIjpHU0kxUEtcIjogYFVTRVIjJHthcHBzeW5jSW5wdXQuaW5wdXQudXNlcklkfWAsXG4gICAgICBcIjpHU0kxU0tcIjogYEFQQVJUTUVOVCMke2FwcHN5bmNJbnB1dC5pbnB1dC5hcGFydG1lbnRJZH1gLFxuICAgICAgXCI6Ym9va2luZ1N0YXR1c1wiOiBcIlBFTkRJTkdcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vV2Ugd2FudCB0byBtYWtlIHN1cmUgdGhpcyBwYXJ0aWN1bGFyIHVzZXIgZG9lc24ndCBhbHJlYWR5IGhhdmUgYSBwZW5kaW5nIGJvb2tpbmcgZm9yIHRoaXMgYXBhcnRtZW50LlxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGRvY3VtZW50Q2xpZW50LnF1ZXJ5KHBhcmFtcykucHJvbWlzZSgpO1xuICBpZiAocmVzcG9uc2UuQ291bnQgIT0gbnVsbCkge1xuICAgIC8vTm8gcGVuZGluZyBib29raW5nLCBzZW5kIGJvb2tpbmcgdG8gU1FTXG5cbiAgICBpZiAocmVzcG9uc2UuQ291bnQgPD0gMCkge1xuICAgICAgbG9nZ2VyLmluZm8oYHNxcyBwcmUgbWVzc2FnZSAke0pTT04uc3RyaW5naWZ5KGJvb2tpbmdJbnB1dC50b0l0ZW0oKSl9YCk7XG4gICAgICBsb2dnZXIuaW5mbyhgc3FzICBxdWV1ZSB1cmwgJHtCT09LSU5HX1FVRVVFX1VSTH1gKTtcbiAgICAgIGNvbnN0IHNxc1BhcmFtczogU1FTLlR5cGVzLlNlbmRNZXNzYWdlUmVxdWVzdCA9IHtcbiAgICAgICAgTWVzc2FnZUJvZHk6IEpTT04uc3RyaW5naWZ5KGJvb2tpbmdJbnB1dC50b0l0ZW0oKSksXG4gICAgICAgIFF1ZXVlVXJsOiBCT09LSU5HX1FVRVVFX1VSTCxcbiAgICAgIH07XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHNxcy5zZW5kTWVzc2FnZShzcXNQYXJhbXMpLnByb21pc2UoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuaW5mbyhgYW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBzZW5kaW5nIG1lc3NhZ2UgdG8gc3FzXCIsICR7ZXJyb3J9YCk7XG4gICAgICAgIHRocm93IEVycm9yKGBhbiBlcnJvciBvY2N1cmVkIHdoaWxlIHNlbmRpbmcgbWVzc2FnZSB0byBzcXNcIiwgJHtlcnJvcn1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy9QZW5kaW5nIEJvb2tpbmcsZG9uJ3Qgc2VuZCBhbnkgbWVzc2FnZSB0byBTUVNcbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBBbHJlYWR5IGhhdmUgYSBwZW5kaW5nIGJvb2tpbmcgZm9yIHRoaXMgYXBhcnRtZW50XCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBRdWVyeWluZyBwZW5kaW5nIGJvb2tpbmdzXCIpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUFwYXJ0bWVudEJvb2tpbmc7XG4iXX0=