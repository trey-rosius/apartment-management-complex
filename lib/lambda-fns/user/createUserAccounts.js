"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const userEntity_1 = require("./userEntity");
const aws_sdk_1 = require("aws-sdk");
const utils_1 = require("../../utils");
async function createUserAccount(appsyncInput, logger) {
    const documentClient = new aws_sdk_1.DynamoDB.DocumentClient();
    let tableName = process.env.ACMS_DB;
    const createdOn = Date.now().toString();
    const id = (0, utils_1.uuid)();
    if (tableName === undefined) {
        logger.error(`Couldn't get the table name`);
        tableName = "AcmsDynamoDBTable";
    }
    const userInput = new userEntity_1.default({
        id: id,
        ...appsyncInput.input,
        createdOn,
    });
    logger.info(`create user input info", ${JSON.stringify(userInput)}`);
    const params = {
        TableName: tableName,
        Item: userInput.toItem(),
        ConditionExpression: "attribute_not_exists(PK)",
    };
    try {
        await documentClient.put(params).promise();
        return userInput.graphQlReturn();
    }
    catch (error) {
        if (error.name === "ConditionalCheckFailedException")
            logger.error(`an error occured while creating user ${error}`);
        throw Error("A user with same email address already Exist");
    }
}
exports.default = createUserAccount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlVXNlckFjY291bnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlVXNlckFjY291bnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkNBQXNDO0FBQ3RDLHFDQUFtQztBQUNuQyx1Q0FBbUM7QUFlbkMsS0FBSyxVQUFVLGlCQUFpQixDQUM5QixZQUF1QixFQUN2QixNQUFjO0lBRWQsTUFBTSxjQUFjLEdBQUcsSUFBSSxrQkFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3JELElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QyxNQUFNLEVBQUUsR0FBVyxJQUFBLFlBQUksR0FBRSxDQUFDO0lBQzFCLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDNUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDO0tBQ2pDO0lBRUQsTUFBTSxTQUFTLEdBQWUsSUFBSSxvQkFBVSxDQUFDO1FBQzNDLEVBQUUsRUFBRSxFQUFFO1FBQ04sR0FBRyxZQUFZLENBQUMsS0FBSztRQUNyQixTQUFTO0tBQ1YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckUsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsU0FBUztRQUNwQixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUN4QixtQkFBbUIsRUFBRSwwQkFBMEI7S0FDaEQsQ0FBQztJQUVGLElBQUk7UUFDRixNQUFNLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDM0MsT0FBTyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7S0FDbEM7SUFBQyxPQUFPLEtBQVUsRUFBRTtRQUNuQixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssaUNBQWlDO1lBQ2xELE1BQU0sQ0FBQyxLQUFLLENBQUMsd0NBQXdDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDaEUsTUFBTSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztLQUM3RDtBQUNILENBQUM7QUFDRCxrQkFBZSxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAYXdzLWxhbWJkYS1wb3dlcnRvb2xzL2xvZ2dlclwiO1xuaW1wb3J0IFVzZXJFbnRpdHkgZnJvbSBcIi4vdXNlckVudGl0eVwiO1xuaW1wb3J0IHsgRHluYW1vREIgfSBmcm9tIFwiYXdzLXNka1wiO1xuaW1wb3J0IHsgdXVpZCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IFVzZXJJbnB1dCBmcm9tIFwiLi9DcmVhdGVVc2VySW5wdXRcIjtcblxudHlwZSBVc2VyUmV0dXJuUGFyYW1ldGVycyA9IHtcbiAgaWQ6IHN0cmluZztcbiAgRU5USVRZOiBzdHJpbmc7XG4gIGZpcnN0TmFtZTogc3RyaW5nO1xuICBsYXN0TmFtZTogc3RyaW5nO1xuICB2ZXJpZmllZDogYm9vbGVhbjtcbiAgZW1haWw6IHN0cmluZztcbiAgdXNlclR5cGU6IHN0cmluZztcbiAgdXBkYXRlZE9uOiBzdHJpbmc7XG4gIGNyZWF0ZWRPbjogc3RyaW5nO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlVXNlckFjY291bnQoXG4gIGFwcHN5bmNJbnB1dDogVXNlcklucHV0LFxuICBsb2dnZXI6IExvZ2dlclxuKTogUHJvbWlzZTxVc2VyUmV0dXJuUGFyYW1ldGVycz4ge1xuICBjb25zdCBkb2N1bWVudENsaWVudCA9IG5ldyBEeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuICBsZXQgdGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuQUNNU19EQjtcbiAgY29uc3QgY3JlYXRlZE9uID0gRGF0ZS5ub3coKS50b1N0cmluZygpO1xuICBjb25zdCBpZDogc3RyaW5nID0gdXVpZCgpO1xuICBpZiAodGFibGVOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICBsb2dnZXIuZXJyb3IoYENvdWxkbid0IGdldCB0aGUgdGFibGUgbmFtZWApO1xuICAgIHRhYmxlTmFtZSA9IFwiQWNtc0R5bmFtb0RCVGFibGVcIjtcbiAgfVxuXG4gIGNvbnN0IHVzZXJJbnB1dDogVXNlckVudGl0eSA9IG5ldyBVc2VyRW50aXR5KHtcbiAgICBpZDogaWQsXG4gICAgLi4uYXBwc3luY0lucHV0LmlucHV0LFxuICAgIGNyZWF0ZWRPbixcbiAgfSk7XG5cbiAgbG9nZ2VyLmluZm8oYGNyZWF0ZSB1c2VyIGlucHV0IGluZm9cIiwgJHtKU09OLnN0cmluZ2lmeSh1c2VySW5wdXQpfWApO1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgSXRlbTogdXNlcklucHV0LnRvSXRlbSgpLFxuICAgIENvbmRpdGlvbkV4cHJlc3Npb246IFwiYXR0cmlidXRlX25vdF9leGlzdHMoUEspXCIsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBkb2N1bWVudENsaWVudC5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgcmV0dXJuIHVzZXJJbnB1dC5ncmFwaFFsUmV0dXJuKCk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gXCJDb25kaXRpb25hbENoZWNrRmFpbGVkRXhjZXB0aW9uXCIpXG4gICAgICBsb2dnZXIuZXJyb3IoYGFuIGVycm9yIG9jY3VyZWQgd2hpbGUgY3JlYXRpbmcgdXNlciAke2Vycm9yfWApO1xuICAgIHRocm93IEVycm9yKFwiQSB1c2VyIHdpdGggc2FtZSBlbWFpbCBhZGRyZXNzIGFscmVhZHkgRXhpc3RcIik7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVVzZXJBY2NvdW50O1xuIl19